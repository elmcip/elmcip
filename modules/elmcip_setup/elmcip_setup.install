<?php
/**
 * @file
 * Install and uninstall code.
 */

/**
 * Enable new feature modles, elmcip_content_types, elmcip_field_instances and elmcip_permissions.
 */
function elmcip_setup_update_7002() {
  module_enable(array('elmcip_content_types', 'elmcip_field_instances', 'elmcip_permissions'));
}

/**
 * Remove settings and blocks blonging to wabi, pixture_reloaded, elmcip_bartik and adaptivetheme_admin.
 */
function elmcip_setup_update_7003() {
  $depricated_themes = array(
    'wabi',
    'pixture_reloaded',
    'elmcip_bartik',
    'adaptivetheme_admin',
  );

  // Delete settings from the $variables table.
  print "Removing theme settings from variables table\n";
  variable_del('color_pixture_reloaded_files');
  variable_del('color_pixture_reloaded_logo');
  variable_del('color_pixture_reloaded_palette');
  variable_del('color_pixture_reloaded_screenshot');
  variable_del('color_pixture_reloaded_stylesheets');
  variable_del('theme_pixture_reloaded_settings');
  variable_del('color_wabi_files');
  variable_del('color_wabi_logo');
  variable_del('color_wabi_palette');
  variable_del('color_wabi_screenshot');
  variable_del('color_wabi_stylesheets');
  variable_del('theme_wabi_settings');
  variable_del('color_elmcip_bartik_files');
  variable_del('color_elmcip_bartik_logo');
  variable_del('color_elmcip_bartik_palette');
  variable_del('color_elmcip_bartik_stylesheets');
  variable_del('theme_elmcip_bartik_settings');
  variable_del('theme_adaptivetheme_admin_settings');
  cache_clear_all('variables', 'cache_bootstrap');

  // Remove blocks registered to removed themes.
  foreach ($depricated_themes as $key => $theme) {
    $removed = db_delete('block')
      ->condition('theme', $theme)
      ->execute();
    print "Removed $removed depricated blocks from theme $theme\n";
  }
}

/**
 * Move system user-menu block from header to region-top.
 */
function elmcip_setup_update_7004() {
  $num_updated = db_update('block')
    ->fields(array(
      'region' => 'header_top',
      'status' => 1,
      'weight' => 1,
    ))
    ->condition('delta', 'user-menu')
    ->condition('theme', 'elmcip')
    ->execute();

  print "Moved and enabled $num_updated block(s) to region header-top \n";
}

/**
 * Remove all orphaned actions from system.
 */
function elmcip_setup_update_7005() {
  actions_synchronize(actions_list(), TRUE);
}

/**
 * Enable new feature module elmcip_layout.
 */
function elmcip_setup_update_7006() {
  module_enable(array('elmcip_layout'), FALSE);
}

/**
 * Removes nodes without bundle/module (faq).
 */
function elmcip_setup_update_7007() {
  $instances = array(
    array(
      'entity_type' => 'node',
      'bundle' => 'faq',
      'field_name' => 'taxonomyextra',
    ),
    // array(
    //   'entity_type' => 'comment',
    //   'bundle' => 'comment_node_faq',
    //   'field_name' => 'comment_body',
    // ),
  );

  $schema = array(
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
      ),
      'deleted' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'revision_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'delta' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'field_pubtype_tax_tid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
  );

  db_create_table('field_revision_taxonomyextra', $schema);


  foreach ($instances as $key => $instance) {
    // // Mark the field instance for deletion.
    // db_update('field_config_instance')
    //   ->fields(array('deleted' => 1))
    //   ->condition('field_name', $instance['field_name'])
    //   ->condition('entity_type', $instance['entity_type'])
    //   ->condition('bundle', $instance['bundle'])
    //   ->execute();

    // // Clear the cache.
    // field_cache_clear();

    // // Mark instance data for deletion (field_storage_delete_instance).
    $field = field_info_field($instance['field_name']);

    // // Act on deletion of a field instance.
    // $table_name = _field_sql_storage_tablename($field);
    // db_update($table_name)
    //   ->fields(array('deleted' => 1))
    //   ->condition('entity_type', $instance['entity_type'])
    //   ->condition('bundle', $instance['bundle'])
    //   ->execute();

    // // Let modules react to the deletion of the instance (field_storage_delete_instance).
    // module_invoke_all('field_delete_instance', $instance);

    // // Delete fields, nodes and content type.
    field_delete_field($field);
    // node_type_delete($instance['entity_type', $instance['bundle']];
  }
}

/**
 * Removes deleted faq vocabulary, terms and nodes.
 */
function elmcip_setup_update_7008() {
  $nodes_faq = array(
    967,
    970,
    972,
    1001,
    1002,
    1105,
    1106,
    1287,
    1500,
  );

  taxonomy_vocabulary_delete(5);
  node_delete_multiple($nodes_faq);
}
